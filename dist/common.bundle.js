!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var o in r)("object"==typeof exports?exports:e)[o]=r[o]}}(global,function(){return function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var o=class{constructor(e,...t){if(this.gameType=e,t.length<2)throw Error("Number of players must be 2 or more");this.players=[].concat(t),this.round=0,this.possibleActions={},e.possibleActions.forEach(e=>{this.possibleActions[e.name]=e})}playRound(e){this.round++;let t=null;for(let r of this.players){let{playerAction:o,othersActions:n}=e.getActions(r);if(o.defeatsAll(n)){t=r;break}}return t}};var n=class extends Map{getActions(e){let t,r=[];for(let[o,n]of this)o===e?t=n:r.push(n);return{playerAction:t,othersActions:r}}};var s=class{constructor(e,t){this.name=e,this.defeatList=[].concat(t)}defeats(e){return this.defeatList.includes(e.name)}defeatsAll(e){return(e=[].concat(e)).filter(e=>this.defeats(e)).length===e.length}isDefeatedBy(e){return e.defeats(this)}toString(){return this.name}};const i={possibleActions:[new s("rock","scissors"),new s("paper","rock"),new s("scissors","paper")],fullName:"Rock Paper Scissors"},c={possibleActions:[new s("rock",["scissors","lizard"]),new s("paper",["rock","spock"]),new s("scissors",["paper","lizard"]),new s("spock",["scissors","rock"]),new s("lizard",["spock","paper"])],fullName:"Rock Paper Scissors Spock Lizard"};var a={RPS:i,RPSSL:c};Object.freeze(i),Object.freeze(c);var l=class{constructor(e){this.name=e}toString(){return this.name}};t.default={Game:o,Round:n,GameType:a,Action:s,Player:l}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,